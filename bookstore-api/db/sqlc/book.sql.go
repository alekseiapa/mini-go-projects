// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: book.sql

package db

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO book (
    name,
    publication
)
VALUES (
    $1, $2
)
RETURNING uuid, name, publication
`

type CreateBookParams struct {
	Name        string `json:"name"`
	Publication string `json:"publication"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.Name, arg.Publication)
	var i Book
	err := row.Scan(&i.Uuid, &i.Name, &i.Publication)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM book
WHERE uuid = $1
`

func (q *Queries) DeleteBook(ctx context.Context, uuid int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, uuid)
	return err
}

const getBook = `-- name: GetBook :one
SELECT uuid, name, publication FROM book
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, uuid int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, uuid)
	var i Book
	err := row.Scan(&i.Uuid, &i.Name, &i.Publication)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT uuid, name, publication FROM book
ORDER BY publication
LIMIT $1
OFFSET $2
`

type ListBooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBooks(ctx context.Context, arg ListBooksParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(&i.Uuid, &i.Name, &i.Publication); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookName = `-- name: UpdateBookName :one
UPDATE book
    SET name = $2
WHERE uuid = $1
RETURNING uuid, name, publication
`

type UpdateBookNameParams struct {
	Uuid int64  `json:"uuid"`
	Name string `json:"name"`
}

func (q *Queries) UpdateBookName(ctx context.Context, arg UpdateBookNameParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBookName, arg.Uuid, arg.Name)
	var i Book
	err := row.Scan(&i.Uuid, &i.Name, &i.Publication)
	return i, err
}

const updateBookPublication = `-- name: UpdateBookPublication :one
UPDATE book
    SET publication = $2
WHERE uuid = $1
RETURNING uuid, name, publication
`

type UpdateBookPublicationParams struct {
	Uuid        int64  `json:"uuid"`
	Publication string `json:"publication"`
}

func (q *Queries) UpdateBookPublication(ctx context.Context, arg UpdateBookPublicationParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBookPublication, arg.Uuid, arg.Publication)
	var i Book
	err := row.Scan(&i.Uuid, &i.Name, &i.Publication)
	return i, err
}
